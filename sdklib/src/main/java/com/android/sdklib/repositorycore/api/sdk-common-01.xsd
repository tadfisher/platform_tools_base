<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2015 The Android Open Source Project
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!--
Generate com.android.sdklib.repository.v2.impl.generated using:
xjc -episode com/android/sdklib/repositorycore/api/common.xjb \
    -p com.anid.sdklib.repositorycore.impl.generated \
    com/android/sdklib/repositorycore/api/sdk-common-01.xsd
-->

<!-- TODO: javadoc and int limiting -->
<!-- TODO: split types that must be public (details) out into separate xsd and generate in api -->
<xsd:schema
        targetNamespace="http://schemas.android.com/sdk/android/common/01"
        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
        elementFormDefault="unqualified"
        attributeFormDefault="unqualified"
        xmlns:sdk="http://schemas.android.com/sdk/android/common/01"
        xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
        version="1"
        jaxb:version="1.0">

    <!-- TODO: description of common stuff

         History:
         - v1: TODO
    -->
    <xsd:complexType name="repositoryType">
        <xsd:annotation>
            <xsd:documentation>
                The repository contains a collection of downloadable packages.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="license" type="sdk:licenseType" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="package" type="sdk:genericType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>


    <xsd:complexType name="genericType">
        <xsd:annotation>
            <xsd:documentation>A generic package.</xsd:documentation>
        </xsd:annotation>
        <xsd:all>
            <xsd:element name="type-details" type="sdk:typeDetails" minOccurs="1"/>
            <!-- The full revision (major.minor.micro.preview), incremented each
                 time a new package is generated. -->
            <xsd:element name="revision" type="sdk:revisionType"/>
            <!-- The optional display list item. When missing, it is auto-computed. -->
            <xsd:element name="uiName" type="xsd:normalizedString" minOccurs="0"/>
            <!-- The optional license of this package. If present, users will have
                 to agree to it before downloading. -->
            <xsd:element name="uses-license" type="sdk:usesLicenseType" minOccurs="0"/>
            <!-- A list of file archives for this package.
                 Must be populated if the package is remote. -->
            <xsd:element name="archives" type="sdk:archivesType" minOccurs="0"/>
            <!-- An optional element indicating the package is obsolete.
                 The string content is however currently not defined and ignored. -->
            <xsd:element name="dependencies" minOccurs="0">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="dependency" type="sdk:dependencyType" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
        </xsd:all>
        <xsd:attribute name="path" type="sdk:segmentListType" use="required"/>
        <xsd:attribute name="obsolete" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="typeDetails" abstract="true"/>

    <xsd:complexType name="genericDetailsType">
        <xsd:complexContent>
            <xsd:extension base="sdk:typeDetails">
                <xsd:all/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="dependencyType">
        <xsd:all>
            <xsd:element name="min-revision" type="sdk:revisionType"/>
        </xsd:all>
        <xsd:attribute name="id" type="xsd:string"/>
    </xsd:complexType>

    <xsd:simpleType name="segmentType">
        <xsd:annotation>
            <xsd:documentation>
                One path segment for the install path of an extra element.
                It must be a single-segment path.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:token">
            <xsd:pattern value="[a-zA-Z0-9_]+"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="segmentListType">
        <xsd:annotation>
            <xsd:documentation>
                A semi-colon separated list of a segmentTypes.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:token">
            <xsd:pattern value="[a-zA-Z0-9_\-;]+"/>
        </xsd:restriction>
    </xsd:simpleType>


    <!-- The definition of a license to be referenced by the uses-license element. -->

    <xsd:complexType name="licenseType">
        <xsd:annotation>
            <xsd:documentation>
                A license definition. Such a license must be used later as a reference
                using a uses-license element in one of the package elements.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
                <xsd:attribute name="id" type="xsd:ID"/>
                <xsd:attribute name="type" type="xsd:token" fixed="text"/>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>


    <!-- Type describing the license used by a package.
         The license MUST be defined using a license node and referenced
         using the ref attribute of the license element inside a package.
     -->

    <xsd:complexType name="usesLicenseType">
        <xsd:annotation>
            <xsd:documentation>
                Describes the license used by a package. The license MUST be defined
                using a license node and referenced using the ref attribute of the
                license element inside a package.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="ref" type="xsd:IDREF"/>
    </xsd:complexType>


    <!-- A collection of files that can be downloaded for a given architecture.
         The <archives> node is mandatory in the repository elements and the
         collection must have at least one <archive> declared.
         Each archive is a zip file that will be unzipped in a location that depends
         on its package type.
     -->

    <xsd:complexType name="archivesType">
        <xsd:annotation>
            <xsd:documentation>
                A collection of files that can be downloaded for a given architecture.
                The &lt;archives&gt; node is mandatory in the repository packages and the
                collection must have at least one &lt;archive&gt; declared.
                Each archive is a zip file that will be unzipped in a location that depends
                on its package type.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence minOccurs="1" maxOccurs="unbounded">
            <!-- One archive file -->
            <xsd:element name="archive" type="sdk:archiveType"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="archiveType">
        <!-- Properties of the archive file -->
        <xsd:all>
            <!-- The size in bytes of the archive to download. -->
            <xsd:element name="size" type="xsd:positiveInteger"/>
            <!-- The checksum of the archive file. -->
            <xsd:element name="checksum" type="sdk:checksumType"/>
            <!-- The URL is an absolute URL if it starts with http://, https://
                 or ftp://. Otherwise it is relative to the parent directory that
                 contains this repository.xml -->
            <xsd:element name="url" type="xsd:token"/>

            <xsd:element name="host-os" type="sdk:osType" minOccurs="0"/>
            <xsd:element name="host-bits" type="sdk:bitSizeType" minOccurs="0"/>
            <xsd:element name="jvm-bits" type="sdk:bitSizeType" minOccurs="0"/>
            <xsd:element name="min-jvm-version" type="sdk:jvmVersionType"
                         minOccurs="0"/>
        </xsd:all>
    </xsd:complexType>


    <!-- A full revision, with a major.minor.micro and an optional preview number.
         The major number is mandatory, the other elements are optional.
     -->

    <xsd:complexType name="revisionType">
        <xsd:annotation>
            <xsd:documentation>
                A full revision, with a major.minor.micro and an
                optional preview number. The major number is mandatory.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:all>
            <!-- The major revision, an int > 0, incremented each time a new
                 package is generated. -->
            <xsd:element name="major" type="xsd:int"/>
            <!-- The minor revision, an int >= 0, incremented each time a new
                 minor package is generated. Assumed to be 0 if missing. -->
            <xsd:element name="minor" type="xsd:int" minOccurs="0"/>
            <!-- The micro revision, an int >= 0, incremented each time a new
                 buf fix is generated. Assumed to be 0 if missing. -->
            <xsd:element name="micro" type="xsd:int" minOccurs="0"/>
            <!-- The preview/release candidate revision, an int > 0,
                 incremented each time a new preview is generated.
                 Not present for final releases. -->
            <xsd:element name="preview" type="xsd:int" minOccurs="0"/>
        </xsd:all>
    </xsd:complexType>


    <!-- The definition of archive filters -->

    <xsd:simpleType name="bitSizeType">
        <xsd:annotation>
            <xsd:documentation>A CPU bit size filter.</xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:token">
            <xsd:enumeration value="32">
                <xsd:annotation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="_32"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="64">
                <xsd:annotation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="_64"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="osType">
        <xsd:annotation>
            <xsd:documentation>A host OS filter.</xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:token">
            <xsd:enumeration value="linux"/>
            <xsd:enumeration value="macosx"/>
            <xsd:enumeration value="windows"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="jvmVersionType">
        <xsd:annotation>
            <xsd:documentation>A JVM version number, e.g. "1" or "1.6" or "1.14.15".
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:pattern value="([1-9](\.[1-9]{1,2}){0,2})"/>
        </xsd:restriction>
    </xsd:simpleType>


    <!-- The definition of a file checksum -->

    <xsd:simpleType name="sha1Number">
        <xsd:annotation>
            <xsd:documentation>A SHA1 checksum.</xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:pattern value="([0-9a-fA-F]){40}"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="checksumType">
        <xsd:annotation>
            <xsd:documentation>A file checksum, currently only SHA1.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:extension base="sdk:sha1Number">
                <xsd:attribute name="type" type="xsd:token" fixed="sha1"/>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>

    <xsd:simpleType name="idType">
        <xsd:annotation>
            <xsd:documentation>
                An tag string for a system image can only be simple alphanumeric string.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:token">
            <xsd:pattern value="[a-zA-Z0-9_-]+"/>
        </xsd:restriction>
    </xsd:simpleType>

</xsd:schema>